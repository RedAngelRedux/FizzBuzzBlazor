@page "/fizzbuzzcustomval"

@using FizzBuzzBlazor.Components.Validators

@inject IJSRuntime JS;

<PageTitle>FizzBuzz</PageTitle>

<div class="container-xxl my-5">
    <h1>FizzBuzz Challenge With Custom Validation</h1>
    <p>Enter your values and press the button to see how the FizzBuzz challenge is solved.</p>
    <p>This version uses EditContext to perform cross-field validation.</p>

    <EditForm EditContext="editContext" OnValidSubmit="GenerateFizzBuzzResults">
        <DataAnnotationsValidator />
        <FizzBuzzValidator OnValidationError="ClearFizzBuzzResults" />
        <div class="border border-secondary-subtle rounded p-4">
            <div class="row row-cols-1 row-cols-md-3 align-items-start">
                <div class="col mt-2">
                    <label for="fizzValue" class="form-label">Fizz Value</label>
                    <InputNumber id="fizzValue" class="form-control" @bind-Value="fizzBuzzModel.FizzValue" placeholder="Fizz Value" 
                        aria-describedby="fizzHelp" aria-label="Fizz Value" />
                    <div id="fizzHelp" class="form-text text-muted">Replaces multiples of this number with "Fizz"</div>
                    <ValidationMessage For="() => fizzBuzzModel.FizzValue"/>
                </div>
                <div class="col mt-2">
                    <label for="buzzValue" class="form-label">Buzz Value</label>
                    <InputNumber id="buzzValue" class="form-control" @bind-Value="fizzBuzzModel.BuzzValue" placeholder="Buzz Value"
                                 aria-describedby="buzzHelp" aria-label="Buzz Value" />
                    <div id="buzzHelp" class="form-text text-muted">Replaces multiples of this number with "Buzz"</div>
                    <ValidationMessage For="() => fizzBuzzModel.BuzzValue" />
                </div>
                <div class="col mt-2">
                    <label for="stopValue" class="form-label">Stop Value</label>
                    <InputNumber id="stopValue" class="form-control" @bind-Value="fizzBuzzModel.StopValue" placeholder="Stop Value"
                                 aria-describedby="stopHelp" aria-label="Stop Value" />
                    <div id="stopHelp" class="form-text text-muted">Will limit the numbers to evaluate</div>
                    <ValidationMessage For="() => fizzBuzzModel.StopValue" />
                </div>
            </div>
            <div class="row">
                <div class="col text-end mt-2">
                    <button type="submit" onmousedown="@CheckValidState" class="btn btn-primary" arial-label="Generate FizzBuzz Results">Generate</button>
                </div>
            </div>
        </div>
    </EditForm>

    @if(fizzBuzzResults.Count > 0)
    {
        <h4 class="mt-5 border-bottom">Fizz Buzz Results</h4>
        <div class="row row-cols-5">
            @foreach(var result in fizzBuzzResults)
            {
                <FizzBuzzItem FizzBuzzValule="@result" />
            }
        </div>
    }

</div>

@code {

    private FizzBuzzModel fizzBuzzModel = new();
    private List<string> fizzBuzzResults = new();

    private EditContext? editContext;

    protected override void OnInitialized()
    {
        // Initialize the EditContext with the model
        editContext = new EditContext(fizzBuzzModel);

        // Optionally, you can set up validation messages
        editContext.OnValidationRequested += (sender, args) => 
        {
            editContext.NotifyValidationStateChanged();
        };
    }

    /// <summary>
    /// This method clears the FizzBuzz results.
    /// </summary>
    private void ClearFizzBuzzResults()
    {
        fizzBuzzResults.Clear();
    }

    /// <summary>
    /// This method was added to ensure the EditContext is validated before the form is submitted.
    /// It is a workaround to the fact that EditForm does not validate cross-field validation before submitting.
    /// </summary>
    private void CheckValidState()
    {        
        if (editContext is not null) editContext.Validate();        
    }

    private void GenerateFizzBuzzResults()
    {
        ClearFizzBuzzResults();

        if (editContext is not null && !editContext.Validate())
        {
            // If validation fails, do not proceed with generating results
            return;
        }
        else
        {
            for (int i = 1; i <= fizzBuzzModel.StopValue; i++)
            {
                if (i % fizzBuzzModel.FizzValue == 0 && i % fizzBuzzModel.BuzzValue == 0)
                {
                    fizzBuzzResults.Add("FizzBuzz");
                }
                else if (i % fizzBuzzModel.FizzValue == 0)
                {
                    fizzBuzzResults.Add("Fizz");
                }
                else if (i % fizzBuzzModel.BuzzValue == 0)
                {
                    fizzBuzzResults.Add("Buzz");
                }
                else
                {
                    fizzBuzzResults.Add(i.ToString());
                }
            }
        }
    }
}
